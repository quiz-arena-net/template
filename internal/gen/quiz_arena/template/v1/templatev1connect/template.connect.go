// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: quiz_arena/template/v1/template.proto

package templatev1connect

import (
	connect "connectrpc.com/connect"
	http "net/http"
	_ "quiz-arena.net/template/internal/gen/quiz_arena/template/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TemplateServiceName is the fully-qualified name of the TemplateService service.
	TemplateServiceName = "quiz_arena.template.v1.TemplateService"
)

// TemplateServiceClient is a client for the quiz_arena.template.v1.TemplateService service.
type TemplateServiceClient interface {
}

// NewTemplateServiceClient constructs a client for the quiz_arena.template.v1.TemplateService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTemplateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TemplateServiceClient {
	return &templateServiceClient{}
}

// templateServiceClient implements TemplateServiceClient.
type templateServiceClient struct {
}

// TemplateServiceHandler is an implementation of the quiz_arena.template.v1.TemplateService
// service.
type TemplateServiceHandler interface {
}

// NewTemplateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTemplateServiceHandler(svc TemplateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/quiz_arena.template.v1.TemplateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTemplateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTemplateServiceHandler struct{}
